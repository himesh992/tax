#!/usr/bin/env python
# coding: utf-8

# In[11]:


get_ipython().run_cell_magic('writefile', 'tax2.py', 'import streamlit as st\nimport pandas as pd\n\nst.set_page_config(page_title="Indian Tax Calculator FY 2024-25", layout="wide")\nst.title("üáÆüá≥ Indian Income Tax Calculator (Old vs New Regime)")\nst.caption("Salary, House Property, Business, Capital Gains & Deductions with Slab-wise Computation")\n\n# -------------------------\n# Instructions\n# -------------------------\nst.header("‚ÑπÔ∏è Instructions")\nst.info("""\n- Resident: Taxed on global income.\n- RNOR: Taxed only on Indian income.\n- Non-Resident: Taxed only on Indian income.\n\n- Rebate under Section 87A: Old ‚â§5L ‚Üí ‚Çπ12,500, New ‚â§7L ‚Üí ‚Çπ25,000\n- Health & Education Cess: 4% on total tax\n- Standard Deduction: Old ‚Çπ50,000, New ‚Çπ75,000\n""")\n\n# -------------------------\n# Residential Status\n# -------------------------\nstatus = st.radio("Select Residential Status:", ["Resident", "Resident but Not Ordinarily Resident (RNOR)", "Non-Resident"])\n\n# -------------------------\n# Age Group\n# -------------------------\nage_group = st.radio("Select Age Group:", ["<60","60-80",">80"])\n\n# -------------------------\n# Salary Inputs\n# -------------------------\nst.header("üíº Salary Income")\nbasic = st.number_input("Basic Salary (Annual) ‚Çπ", 0, step=1000)\nda = st.number_input("Dearness Allowance (DA) ‚Çπ", 0, step=1000)\nhra = st.number_input("House Rent Allowance (HRA) ‚Çπ", 0, step=1000)\nrent_paid = st.number_input("Actual Rent Paid (Annual) ‚Çπ", 0, step=1000)\nmetro = st.checkbox("Metro City (HRA exemption 50% of Basic+DA, else 40%)")\nallowances = st.number_input("Other Allowances ‚Çπ", 0, step=1000)\nperquisites = st.number_input("Perquisites ‚Çπ", 0, step=1000)\nbonus = st.number_input("Bonus ‚Çπ", 0, step=1000)\n\n# HRA Exemption\nhra_exempt = 0\nif hra > 0 and rent_paid > 0:\n    hra_exempt = min(hra, (0.5 if metro else 0.4)*(basic+da), rent_paid - 0.1*(basic+da))\n\nsalary_gross = basic + da + hra + allowances + perquisites + bonus\nsalary_taxable_old = max(0, salary_gross - hra_exempt - 50000)  # Std Deduction Old\nsalary_taxable_new = max(0, salary_gross - hra_exempt - 75000)  # Std Deduction New\nst.write(f"Total Gross Salary: ‚Çπ{salary_gross:,}")\nst.write(f"HRA Exemption: ‚Çπ{hra_exempt:,}")\n\n# -------------------------\n# House Property Inputs\n# -------------------------\nst.header("üè† House Property Income")\nn_props = st.number_input("Number of Properties", 1, 3, 1)\nhouse_list = []\nfor i in range(int(n_props)):\n    with st.expander(f"Property #{i+1}"):\n        ptype = st.selectbox("Type", ["Self-occupied", "Let-out"], key=f"ptype{i}")\n        rent = st.number_input("Monthly Rent (‚Çπ)", 0, step=500, key=f"rent{i}") if ptype=="Let-out" else 0\n        muni = st.number_input("Municipal Taxes (Annual ‚Çπ)", 0, step=500, key=f"muni{i}")\n        loan = st.number_input("Home Loan Interest (Annual ‚Çπ)", 0, step=1000, key=f"loan{i}")\n        house_list.append({"type": ptype, "rent": rent, "municipal": muni, "loan": loan})\n\nhouse_df, total_house_income = [], 0\nfor idx, h in enumerate(house_list):\n    if h["type"]=="Self-occupied":\n        income = -min(200000, h["loan"])\n        nav, deduction30 = 0, 0\n    else:\n        nav = h["rent"]*12 - h["municipal"]\n        deduction30 = 0.3*nav\n        income = nav - deduction30 - h["loan"]\n    total_house_income += income\n    house_df.append({"Property": f"Property {idx+1}", "Type": h["type"], "NAV": nav, "30% Deduction": deduction30, "Loan Interest": h["loan"], "Income": income})\n\nhouse_df = pd.DataFrame(house_df)\nst.dataframe(house_df)\nst.write(f"Total House Property Income: ‚Çπ{total_house_income:,}")\n\n# -------------------------\n# Business/Profession Inputs\n# -------------------------\nst.header("üè¢ Business/Professional Income")\nturnover = st.number_input("Gross Receipts / Turnover ‚Çπ", 0, step=1000)\nexpenses = st.number_input("Business Expenses ‚Çπ", 0, step=1000)\ndep = st.number_input("Depreciation ‚Çπ", 0, step=1000)\nnet_business_income = max(0, turnover - expenses - dep)\nst.write(f"Net Business Income: ‚Çπ{net_business_income:,}")\n\n# -------------------------\n# Capital Gains Inputs\n# -------------------------\nst.header("üìà Capital Gains")\nstcg_111a = st.number_input("STCG on Equity (u/s 111A, 15%) ‚Çπ", 0, step=1000)\nstcg_other = st.number_input("Other STCG (taxed at slab) ‚Çπ", 0, step=1000)\nltcg_112a = st.number_input("LTCG on Equity (u/s 112A, 10% > ‚Çπ1L) ‚Çπ", 0, step=1000)\nltcg_other = st.number_input("Other LTCG (u/s 112, 20% with indexation) ‚Çπ", 0, step=1000)\nltcg_taxable = max(0, ltcg_112a - 100000)\n\n# -------------------------\n# Other Income & Deductions\n# -------------------------\nst.header("üí∞ Other Income & Deductions")\nother_income = st.number_input("Other Income (FD, Dividends, Gifts) ‚Çπ", 0, step=1000)\nded_80c = st.number_input("80C Investments ‚Çπ (Max ‚Çπ1.5L)", 0, step=1000)\nded_80d = st.number_input("80D Medical Insurance ‚Çπ (Max ‚Çπ25k/‚Çπ50k)", 0, step=1000)\nded_80tta = st.number_input("80TTA Savings Interest ‚Çπ (Max ‚Çπ10k)", 0, step=1000)\n\ntotal_deductions = min(150000, ded_80c) + ded_80d + min(10000, ded_80tta)\nst.write(f"Total Deductions: ‚Çπ{total_deductions:,}")\n\n# -------------------------\n# Taxable Income\n# -------------------------\ngross_income_old = salary_taxable_old + total_house_income + net_business_income + stcg_other + other_income\ngross_income_new = salary_taxable_new + total_house_income + net_business_income + stcg_other + other_income\n\n# -------------------------\n# Tax Functions\n# -------------------------\ndef tax_old_regime(income, age="<60"):\n    tax = 0\n    if age=="<60": slabs=[(250000,0.0),(250000,0.05),(500000,0.2),(float(\'inf\'),0.3)]\n    elif age=="60-80": slabs=[(300000,0.0),(200000,0.05),(500000,0.2),(float(\'inf\'),0.3)]\n    else: slabs=[(500000,0.0),(500000,0.2),(float(\'inf\'),0.3)]\n    prev=0\n    for slab,rate in slabs:\n        taxable=min(max(income-prev,0),slab)\n        tax+=taxable*rate\n        prev+=slab\n    return tax\n\ndef tax_new_regime(income):\n    tax=0\n    slabs=[(300000,0.0),(400000,0.05),(300000,0.10),(300000,0.15),(300000,0.20),(float(\'inf\'),0.30)]\n    prev=0\n    for slab,rate in slabs:\n        taxable=min(max(income-prev,0),slab)\n        tax+=taxable*rate\n        prev+=slab\n    return tax\n\n# -------------------------\n# Compute Tax\n# -------------------------\ntax_old = tax_old_regime(gross_income_old, age_group) + 0.15*stcg_111a + 0.10*ltcg_taxable + 0.20*ltcg_other\nif gross_income_old <= 500000: tax_old = max(0, tax_old-12500)\ntax_old_total = tax_old*1.04  # 4% cess\n\ntax_new = tax_new_regime(gross_income_new) + 0.15*stcg_111a + 0.10*ltcg_taxable + 0.20*ltcg_other\nif gross_income_new <= 700000: tax_new = max(0, tax_new-25000)\ntax_new_total = tax_new*1.04\n\n# -------------------------\n# Display Tax\n# -------------------------\nst.subheader("üíµ Tax Computation (incl. 4% Cess)")\nst.write(f"Old Regime Tax: ‚Çπ{tax_old_total:,.0f}")\nst.write(f"New Regime Tax: ‚Çπ{tax_new_total:,.0f}")\n\n# Compare Regimes\nif tax_old_total < tax_new_total:\n    st.success(f"‚úÖ Old Regime is better. You save ‚Çπ{tax_new_total - tax_old_total:,.0f}")\nelse:\n    st.success(f"‚úÖ New Regime is better. You save ‚Çπ{tax_old_total - tax_new_total:,.0f}")\n')

